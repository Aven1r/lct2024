services:
  database:
    user: "0:0"
    image: postgres:latest
    restart: unless-stopped
    env_file:
      - backend/src/.envs/db.env
    healthcheck:
      test: [ "CMD-SHELL", "sh -c 'pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}'" ]
      interval: 10s
      timeout: 3s
      retries: 2
    volumes:
      - db_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    privileged: true

  inmemory_db:
    image: redis:latest
    restart: unless-stopped
    env_file:
      - backend/src/.envs/redis.env
    command: /bin/sh -c "redis-server --requirepass $${REDIS_PASSWORD:?REDIS_PASSWORD variable is not set}"
    healthcheck:
      test: [ "CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 2
    volumes:
      - inmemory_db_data:/var/lib/redis/data
    ports:
      - 6379:6379

  ml:
    restart: unless-stopped
    build:
      context: ./ml
      dockerfile: ml.dockerfile
    ports:
      - 8080:8080

  backend:
    restart: unless-stopped
    env_file:
      - backend/src/.envs/app.env
      - backend/src/.envs/auth.env
    depends_on:
      - database
      - inmemory_db
      - ml
    ports:
      - 8000:8000
    build:
      context: backend/src
      dockerfile: Dockerfile

  tg_bot:
    restart: unless-stopped
    build:
      context: tg_bot
      dockerfile: Dockerfile

  frontend:
    restart: unless-stopped
    build:
      context: frontend
      dockerfile: Dockerfile
    ports: [ 8080:80, 8443:443 ]
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile
      - caddy_data:/data
      - caddy_config:/config
    env_file: [ .env ]


volumes:
  caddy_data:
  caddy_config:
  db_data:
  inmemory_db_data:
